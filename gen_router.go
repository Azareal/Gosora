// Code generated by. DO NOT EDIT.
/* This file was automatically generated by the software. Please don't edit it as your changes may be overwritten at any moment. */
package main

import (
	"log"
	"strings"
	"sync"
	"errors"
	"net/http"

	"./common"
	"./routes"
)

var ErrNoRoute = errors.New("That route doesn't exist.")
// TODO: What about the /uploads/ route? x.x
var RouteMap = map[string]interface{}{ 
	"routeAPI": routeAPI,
	"routeOverview": routeOverview,
	"routeCustomPage": routeCustomPage,
	"routeForums": routeForums,
	"routeForum": routeForum,
	"routeChangeTheme": routeChangeTheme,
	"routeShowAttachment": routeShowAttachment,
	"routeWebsockets": routeWebsockets,
	"routeReportSubmit": routeReportSubmit,
	"routes.CreateTopic": routes.CreateTopic,
	"routeTopics": routeTopics,
	"routePanelForums": routePanelForums,
	"routePanelForumsCreateSubmit": routePanelForumsCreateSubmit,
	"routePanelForumsDelete": routePanelForumsDelete,
	"routePanelForumsDeleteSubmit": routePanelForumsDeleteSubmit,
	"routePanelForumsEdit": routePanelForumsEdit,
	"routePanelForumsEditSubmit": routePanelForumsEditSubmit,
	"routePanelForumsEditPermsSubmit": routePanelForumsEditPermsSubmit,
	"routePanelForumsEditPermsAdvance": routePanelForumsEditPermsAdvance,
	"routePanelForumsEditPermsAdvanceSubmit": routePanelForumsEditPermsAdvanceSubmit,
	"routePanelSettings": routePanelSettings,
	"routePanelSettingEdit": routePanelSettingEdit,
	"routePanelSettingEditSubmit": routePanelSettingEditSubmit,
	"routePanelWordFilters": routePanelWordFilters,
	"routePanelWordFiltersCreateSubmit": routePanelWordFiltersCreateSubmit,
	"routePanelWordFiltersEdit": routePanelWordFiltersEdit,
	"routePanelWordFiltersEditSubmit": routePanelWordFiltersEditSubmit,
	"routePanelWordFiltersDeleteSubmit": routePanelWordFiltersDeleteSubmit,
	"routePanelThemes": routePanelThemes,
	"routePanelThemesSetDefault": routePanelThemesSetDefault,
	"routePanelPlugins": routePanelPlugins,
	"routePanelPluginsActivate": routePanelPluginsActivate,
	"routePanelPluginsDeactivate": routePanelPluginsDeactivate,
	"routePanelPluginsInstall": routePanelPluginsInstall,
	"routePanelUsers": routePanelUsers,
	"routePanelUsersEdit": routePanelUsersEdit,
	"routePanelUsersEditSubmit": routePanelUsersEditSubmit,
	"routePanelAnalyticsViews": routePanelAnalyticsViews,
	"routePanelAnalyticsRoutes": routePanelAnalyticsRoutes,
	"routePanelAnalyticsAgents": routePanelAnalyticsAgents,
	"routePanelAnalyticsRouteViews": routePanelAnalyticsRouteViews,
	"routePanelAnalyticsAgentViews": routePanelAnalyticsAgentViews,
	"routePanelAnalyticsPosts": routePanelAnalyticsPosts,
	"routePanelAnalyticsTopics": routePanelAnalyticsTopics,
	"routePanelGroups": routePanelGroups,
	"routePanelGroupsEdit": routePanelGroupsEdit,
	"routePanelGroupsEditPerms": routePanelGroupsEditPerms,
	"routePanelGroupsEditSubmit": routePanelGroupsEditSubmit,
	"routePanelGroupsEditPermsSubmit": routePanelGroupsEditPermsSubmit,
	"routePanelGroupsCreateSubmit": routePanelGroupsCreateSubmit,
	"routePanelBackups": routePanelBackups,
	"routePanelLogsMod": routePanelLogsMod,
	"routePanelDebug": routePanelDebug,
	"routePanelDashboard": routePanelDashboard,
	"routes.AccountEditCritical": routes.AccountEditCritical,
	"routeAccountEditCriticalSubmit": routeAccountEditCriticalSubmit,
	"routeAccountEditAvatar": routeAccountEditAvatar,
	"routeAccountEditAvatarSubmit": routeAccountEditAvatarSubmit,
	"routeAccountEditUsername": routeAccountEditUsername,
	"routeAccountEditUsernameSubmit": routeAccountEditUsernameSubmit,
	"routeAccountEditEmail": routeAccountEditEmail,
	"routeAccountEditEmailTokenSubmit": routeAccountEditEmailTokenSubmit,
	"routeProfile": routeProfile,
	"routes.BanUserSubmit": routes.BanUserSubmit,
	"routes.UnbanUser": routes.UnbanUser,
	"routes.ActivateUser": routes.ActivateUser,
	"routes.IPSearch": routes.IPSearch,
	"routes.CreateTopicSubmit": routes.CreateTopicSubmit,
	"routes.EditTopicSubmit": routes.EditTopicSubmit,
	"routes.DeleteTopicSubmit": routes.DeleteTopicSubmit,
	"routes.StickTopicSubmit": routes.StickTopicSubmit,
	"routes.UnstickTopicSubmit": routes.UnstickTopicSubmit,
	"routes.LockTopicSubmit": routes.LockTopicSubmit,
	"routes.UnlockTopicSubmit": routes.UnlockTopicSubmit,
	"routes.MoveTopicSubmit": routes.MoveTopicSubmit,
	"routeLikeTopicSubmit": routeLikeTopicSubmit,
	"routeTopicID": routeTopicID,
	"routeCreateReplySubmit": routeCreateReplySubmit,
	"routes.ReplyEditSubmit": routes.ReplyEditSubmit,
	"routes.ReplyDeleteSubmit": routes.ReplyDeleteSubmit,
	"routeReplyLikeSubmit": routeReplyLikeSubmit,
	"routeProfileReplyCreateSubmit": routeProfileReplyCreateSubmit,
	"routes.ProfileReplyEditSubmit": routes.ProfileReplyEditSubmit,
	"routes.ProfileReplyDeleteSubmit": routes.ProfileReplyDeleteSubmit,
	"routeLogin": routeLogin,
	"routeRegister": routeRegister,
	"routeLogout": routeLogout,
	"routeLoginSubmit": routeLoginSubmit,
	"routeRegisterSubmit": routeRegisterSubmit,
	"routeDynamic": routeDynamic,
	"routeUploads": routeUploads,
	"BadRoute": BadRoute,
}

// ! NEVER RELY ON THESE REMAINING THE SAME BETWEEN COMMITS
var routeMapEnum = map[string]int{ 
	"routeAPI": 0,
	"routeOverview": 1,
	"routeCustomPage": 2,
	"routeForums": 3,
	"routeForum": 4,
	"routeChangeTheme": 5,
	"routeShowAttachment": 6,
	"routeWebsockets": 7,
	"routeReportSubmit": 8,
	"routes.CreateTopic": 9,
	"routeTopics": 10,
	"routePanelForums": 11,
	"routePanelForumsCreateSubmit": 12,
	"routePanelForumsDelete": 13,
	"routePanelForumsDeleteSubmit": 14,
	"routePanelForumsEdit": 15,
	"routePanelForumsEditSubmit": 16,
	"routePanelForumsEditPermsSubmit": 17,
	"routePanelForumsEditPermsAdvance": 18,
	"routePanelForumsEditPermsAdvanceSubmit": 19,
	"routePanelSettings": 20,
	"routePanelSettingEdit": 21,
	"routePanelSettingEditSubmit": 22,
	"routePanelWordFilters": 23,
	"routePanelWordFiltersCreateSubmit": 24,
	"routePanelWordFiltersEdit": 25,
	"routePanelWordFiltersEditSubmit": 26,
	"routePanelWordFiltersDeleteSubmit": 27,
	"routePanelThemes": 28,
	"routePanelThemesSetDefault": 29,
	"routePanelPlugins": 30,
	"routePanelPluginsActivate": 31,
	"routePanelPluginsDeactivate": 32,
	"routePanelPluginsInstall": 33,
	"routePanelUsers": 34,
	"routePanelUsersEdit": 35,
	"routePanelUsersEditSubmit": 36,
	"routePanelAnalyticsViews": 37,
	"routePanelAnalyticsRoutes": 38,
	"routePanelAnalyticsAgents": 39,
	"routePanelAnalyticsRouteViews": 40,
	"routePanelAnalyticsAgentViews": 41,
	"routePanelAnalyticsPosts": 42,
	"routePanelAnalyticsTopics": 43,
	"routePanelGroups": 44,
	"routePanelGroupsEdit": 45,
	"routePanelGroupsEditPerms": 46,
	"routePanelGroupsEditSubmit": 47,
	"routePanelGroupsEditPermsSubmit": 48,
	"routePanelGroupsCreateSubmit": 49,
	"routePanelBackups": 50,
	"routePanelLogsMod": 51,
	"routePanelDebug": 52,
	"routePanelDashboard": 53,
	"routes.AccountEditCritical": 54,
	"routeAccountEditCriticalSubmit": 55,
	"routeAccountEditAvatar": 56,
	"routeAccountEditAvatarSubmit": 57,
	"routeAccountEditUsername": 58,
	"routeAccountEditUsernameSubmit": 59,
	"routeAccountEditEmail": 60,
	"routeAccountEditEmailTokenSubmit": 61,
	"routeProfile": 62,
	"routes.BanUserSubmit": 63,
	"routes.UnbanUser": 64,
	"routes.ActivateUser": 65,
	"routes.IPSearch": 66,
	"routes.CreateTopicSubmit": 67,
	"routes.EditTopicSubmit": 68,
	"routes.DeleteTopicSubmit": 69,
	"routes.StickTopicSubmit": 70,
	"routes.UnstickTopicSubmit": 71,
	"routes.LockTopicSubmit": 72,
	"routes.UnlockTopicSubmit": 73,
	"routes.MoveTopicSubmit": 74,
	"routeLikeTopicSubmit": 75,
	"routeTopicID": 76,
	"routeCreateReplySubmit": 77,
	"routes.ReplyEditSubmit": 78,
	"routes.ReplyDeleteSubmit": 79,
	"routeReplyLikeSubmit": 80,
	"routeProfileReplyCreateSubmit": 81,
	"routes.ProfileReplyEditSubmit": 82,
	"routes.ProfileReplyDeleteSubmit": 83,
	"routeLogin": 84,
	"routeRegister": 85,
	"routeLogout": 86,
	"routeLoginSubmit": 87,
	"routeRegisterSubmit": 88,
	"routeDynamic": 89,
	"routeUploads": 90,
	"BadRoute": 91,
}
var reverseRouteMapEnum = map[int]string{ 
	0: "routeAPI",
	1: "routeOverview",
	2: "routeCustomPage",
	3: "routeForums",
	4: "routeForum",
	5: "routeChangeTheme",
	6: "routeShowAttachment",
	7: "routeWebsockets",
	8: "routeReportSubmit",
	9: "routes.CreateTopic",
	10: "routeTopics",
	11: "routePanelForums",
	12: "routePanelForumsCreateSubmit",
	13: "routePanelForumsDelete",
	14: "routePanelForumsDeleteSubmit",
	15: "routePanelForumsEdit",
	16: "routePanelForumsEditSubmit",
	17: "routePanelForumsEditPermsSubmit",
	18: "routePanelForumsEditPermsAdvance",
	19: "routePanelForumsEditPermsAdvanceSubmit",
	20: "routePanelSettings",
	21: "routePanelSettingEdit",
	22: "routePanelSettingEditSubmit",
	23: "routePanelWordFilters",
	24: "routePanelWordFiltersCreateSubmit",
	25: "routePanelWordFiltersEdit",
	26: "routePanelWordFiltersEditSubmit",
	27: "routePanelWordFiltersDeleteSubmit",
	28: "routePanelThemes",
	29: "routePanelThemesSetDefault",
	30: "routePanelPlugins",
	31: "routePanelPluginsActivate",
	32: "routePanelPluginsDeactivate",
	33: "routePanelPluginsInstall",
	34: "routePanelUsers",
	35: "routePanelUsersEdit",
	36: "routePanelUsersEditSubmit",
	37: "routePanelAnalyticsViews",
	38: "routePanelAnalyticsRoutes",
	39: "routePanelAnalyticsAgents",
	40: "routePanelAnalyticsRouteViews",
	41: "routePanelAnalyticsAgentViews",
	42: "routePanelAnalyticsPosts",
	43: "routePanelAnalyticsTopics",
	44: "routePanelGroups",
	45: "routePanelGroupsEdit",
	46: "routePanelGroupsEditPerms",
	47: "routePanelGroupsEditSubmit",
	48: "routePanelGroupsEditPermsSubmit",
	49: "routePanelGroupsCreateSubmit",
	50: "routePanelBackups",
	51: "routePanelLogsMod",
	52: "routePanelDebug",
	53: "routePanelDashboard",
	54: "routes.AccountEditCritical",
	55: "routeAccountEditCriticalSubmit",
	56: "routeAccountEditAvatar",
	57: "routeAccountEditAvatarSubmit",
	58: "routeAccountEditUsername",
	59: "routeAccountEditUsernameSubmit",
	60: "routeAccountEditEmail",
	61: "routeAccountEditEmailTokenSubmit",
	62: "routeProfile",
	63: "routes.BanUserSubmit",
	64: "routes.UnbanUser",
	65: "routes.ActivateUser",
	66: "routes.IPSearch",
	67: "routes.CreateTopicSubmit",
	68: "routes.EditTopicSubmit",
	69: "routes.DeleteTopicSubmit",
	70: "routes.StickTopicSubmit",
	71: "routes.UnstickTopicSubmit",
	72: "routes.LockTopicSubmit",
	73: "routes.UnlockTopicSubmit",
	74: "routes.MoveTopicSubmit",
	75: "routeLikeTopicSubmit",
	76: "routeTopicID",
	77: "routeCreateReplySubmit",
	78: "routes.ReplyEditSubmit",
	79: "routes.ReplyDeleteSubmit",
	80: "routeReplyLikeSubmit",
	81: "routeProfileReplyCreateSubmit",
	82: "routes.ProfileReplyEditSubmit",
	83: "routes.ProfileReplyDeleteSubmit",
	84: "routeLogin",
	85: "routeRegister",
	86: "routeLogout",
	87: "routeLoginSubmit",
	88: "routeRegisterSubmit",
	89: "routeDynamic",
	90: "routeUploads",
	91: "BadRoute",
}
var agentMapEnum = map[string]int{ 
	"unknown": 0,
	"firefox": 1,
	"chrome": 2,
	"opera": 3,
	"safari": 4,
	"edge": 5,
	"internetexplorer": 6,
	"googlebot": 7,
	"yandex": 8,
	"bing": 9,
	"baidu": 10,
	"duckduckgo": 11,
	"discord": 12,
	"cloudflarealwayson": 13,
	"uptimebot": 14,
	"lynx": 15,
	"blank": 16,
	"malformed": 17,
	"suspicious": 18,
}
var reverseAgentMapEnum = map[int]string{ 
	0: "unknown",
	1: "firefox",
	2: "chrome",
	3: "opera",
	4: "safari",
	5: "edge",
	6: "internetexplorer",
	7: "googlebot",
	8: "yandex",
	9: "bing",
	10: "baidu",
	11: "duckduckgo",
	12: "discord",
	13: "cloudflarealwayson",
	14: "uptimebot",
	15: "lynx",
	16: "blank",
	17: "malformed",
	18: "suspicious",
}

// TODO: Stop spilling these into the package scope?
func init() {
	common.SetRouteMapEnum(routeMapEnum)
	common.SetReverseRouteMapEnum(reverseRouteMapEnum)
	common.SetAgentMapEnum(agentMapEnum)
	common.SetReverseAgentMapEnum(reverseAgentMapEnum)
}

type GenRouter struct {
	UploadHandler func(http.ResponseWriter, *http.Request)
	extraRoutes map[string]func(http.ResponseWriter, *http.Request, common.User) common.RouteError
	
	sync.RWMutex
}

func NewGenRouter(uploads http.Handler) *GenRouter {
	return &GenRouter{
		UploadHandler: http.StripPrefix("/uploads/",uploads).ServeHTTP,
		extraRoutes: make(map[string]func(http.ResponseWriter, *http.Request, common.User) common.RouteError),
	}
}

func (router *GenRouter) handleError(err common.RouteError, w http.ResponseWriter, r *http.Request, user common.User) {
	if err.Handled() {
		return
	}
	
	if err.Type() == "system" {
		common.InternalErrorJSQ(err, w, r, err.JSON())
		return
	}
	common.LocalErrorJSQ(err.Error(), w, r, user,err.JSON())
}

func (router *GenRouter) Handle(_ string, _ http.Handler) {
}

func (router *GenRouter) HandleFunc(pattern string, handle func(http.ResponseWriter, *http.Request, common.User) common.RouteError) {
	router.Lock()
	defer router.Unlock()
	router.extraRoutes[pattern] = handle
}

func (router *GenRouter) RemoveFunc(pattern string) error {
	router.Lock()
	defer router.Unlock()
	_, ok := router.extraRoutes[pattern]
	if !ok {
		return ErrNoRoute
	}
	delete(router.extraRoutes, pattern)
	return nil
}

// TODO: Pass the default route or config struct to the router rather than accessing it via a package global
// TODO: SetDefaultRoute
// TODO: GetDefaultRoute

func (router *GenRouter) ServeHTTP(w http.ResponseWriter, req *http.Request) {
	if len(req.URL.Path) == 0 || req.URL.Path[0] != '/' || req.Host != common.Site.Host {
		w.WriteHeader(200) // 405
		w.Write([]byte(""))
		log.Print("Malformed Request")
		log.Print("UA: ", req.UserAgent())
		log.Print("Method: ", req.Method)
		for key, value := range req.Header {
			for _, vvalue := range value {
				log.Print("Header '" + key + "': " + vvalue + "!!")
			}
		}
		log.Print("req.Host: ", req.Host)
		log.Print("req.URL.Path: ", req.URL.Path)
		log.Print("req.URL.RawQuery: ", req.URL.RawQuery)
		log.Print("req.Referer(): ", req.Referer())
		log.Print("req.RemoteAddr: ", req.RemoteAddr)
		common.AgentViewCounter.Bump(17)
		return
	}

	if common.Dev.DebugMode {
		// TODO: Cover more suspicious strings and at a lower layer than this
		for _, char := range req.URL.Path {
			if char != '&' && !(char > 44 && char < 58) && char != '=' && char != '?' && !(char > 64 && char < 91) && char != '\\' && char != '_' && !(char > 96 && char < 123) {
				log.Print("Suspicious UA: ", req.UserAgent())
				log.Print("Method: ", req.Method)
				for key, value := range req.Header {
					for _, vvalue := range value {
						log.Print("Header '" + key + "': " + vvalue + "!!")
					}
				}
				log.Print("req.Host: ", req.Host)
				log.Print("req.URL.Path: ", req.URL.Path)
				log.Print("req.URL.RawQuery: ", req.URL.RawQuery)
				log.Print("req.Referer(): ", req.Referer())
				log.Print("req.RemoteAddr: ", req.RemoteAddr)
				common.AgentViewCounter.Bump(18)
				break
			}
		}
		// TODO: Flag any requests which has a dot with anything but a number after that
		if strings.Contains(req.URL.Path,"..") || strings.Contains(req.URL.Path,"--") || strings.Contains(req.URL.Path,".php") || strings.Contains(req.URL.Path,".asp") || strings.Contains(req.URL.Path,".cgi") {
			log.Print("Suspicious UA: ", req.UserAgent())
			log.Print("Method: ", req.Method)
			for key, value := range req.Header {
				for _, vvalue := range value {
					log.Print("Header '" + key + "': " + vvalue + "!!")
				}
			}
			log.Print("req.Host: ", req.Host)
			log.Print("req.URL.Path: ", req.URL.Path)
			log.Print("req.URL.RawQuery: ", req.URL.RawQuery)
			log.Print("req.Referer(): ", req.Referer())
			log.Print("req.RemoteAddr: ", req.RemoteAddr)
			common.AgentViewCounter.Bump(18)
		}
	}
	
	var prefix, extraData string
	prefix = req.URL.Path[0:strings.IndexByte(req.URL.Path[1:],'/') + 1]
	if req.URL.Path[len(req.URL.Path) - 1] != '/' {
		extraData = req.URL.Path[strings.LastIndexByte(req.URL.Path,'/') + 1:]
		req.URL.Path = req.URL.Path[:strings.LastIndexByte(req.URL.Path,'/') + 1]
	}
	
	if common.Dev.SuperDebug {
		log.Print("before routeStatic")
		log.Print("Method: ", req.Method)
		for key, value := range req.Header {
			for _, vvalue := range value {
				log.Print("Header '" + key + "': " + vvalue + "!!")
			}
		}
		log.Print("prefix: ", prefix)
		log.Print("req.Host: ", req.Host)
		log.Print("req.URL.Path: ", req.URL.Path)
		log.Print("req.URL.RawQuery: ", req.URL.RawQuery)
		log.Print("extraData: ", extraData)
		log.Print("req.Referer(): ", req.Referer())
		log.Print("req.RemoteAddr: ", req.RemoteAddr)
	}
	
	if prefix == "/static" {
		req.URL.Path += extraData
		routeStatic(w, req)
		return
	}
	if common.Dev.SuperDebug {
		log.Print("before PreRoute")
	}

	// Increment the global view counter
	common.GlobalViewCounter.Bump()

	// Track the user agents. Unfortunately, everyone pretends to be Mozilla, so this'll be a little less efficient than I would like.
	// TODO: Add a setting to disable this?
	// TODO: Use a more efficient detector instead of smashing every possible combination in
	ua := strings.TrimSpace(strings.TrimSuffix(strings.TrimPrefix(req.UserAgent(),"Mozilla/5.0 ")," Safari/537.36")) // Noise, no one's going to be running this and it complicates implementing an efficient UA parser, particularly the more efficient right-to-left one I have in mind
	switch {
	case strings.Contains(ua,"Google"):
		common.AgentViewCounter.Bump(7)
	case strings.Contains(ua,"Yandex"):
		common.AgentViewCounter.Bump(8)
	case strings.Contains(ua,"bingbot"), strings.Contains(ua,"BingPreview"):
		common.AgentViewCounter.Bump(9)
	case strings.Contains(ua,"OPR"): // Pretends to be Chrome, needs to run before that
		common.AgentViewCounter.Bump(3)
	case strings.Contains(ua,"Edge"):
		common.AgentViewCounter.Bump(5)
	case strings.Contains(ua,"Chrome"):
		common.AgentViewCounter.Bump(2)
	case strings.Contains(ua,"Firefox"):
		common.AgentViewCounter.Bump(1)
	case strings.Contains(ua,"Safari"):
		common.AgentViewCounter.Bump(4)
	case strings.Contains(ua,"MSIE"):
		common.AgentViewCounter.Bump(6)
	case strings.Contains(ua,"Baiduspider"):
		common.AgentViewCounter.Bump(10)
	case strings.Contains(ua,"DuckDuckBot"):
		common.AgentViewCounter.Bump(11)
	case strings.Contains(ua,"Discordbot"):
		common.AgentViewCounter.Bump(12)
	case strings.Contains(ua,"Lynx"):
		common.AgentViewCounter.Bump(15)
	case strings.Contains(ua,"CloudFlare-AlwaysOnline"):
		common.AgentViewCounter.Bump(13)
	case strings.Contains(ua,"Uptimebot"):
		common.AgentViewCounter.Bump(14)
	case ua == "":
		common.AgentViewCounter.Bump(16)
		if common.Dev.DebugMode {
			log.Print("Blank UA: ", req.UserAgent())
			log.Print("Method: ", req.Method)

			for key, value := range req.Header {
				for _, vvalue := range value {
					log.Print("Header '" + key + "': " + vvalue + "!!")
				}
			}
			log.Print("prefix: ", prefix)
			log.Print("req.Host: ", req.Host)
			log.Print("req.URL.Path: ", req.URL.Path)
			log.Print("req.URL.RawQuery: ", req.URL.RawQuery)
			log.Print("extraData: ", extraData)
			log.Print("req.Referer(): ", req.Referer())
			log.Print("req.RemoteAddr: ", req.RemoteAddr)
		}
	default:
		common.AgentViewCounter.Bump(0)
		if common.Dev.DebugMode {
			log.Print("Unknown UA: ", req.UserAgent())
			log.Print("Method: ", req.Method)
			for key, value := range req.Header {
				for _, vvalue := range value {
					log.Print("Header '" + key + "': " + vvalue + "!!")
				}
			}
			log.Print("prefix: ", prefix)
			log.Print("req.Host: ", req.Host)
			log.Print("req.URL.Path: ", req.URL.Path)
			log.Print("req.URL.RawQuery: ", req.URL.RawQuery)
			log.Print("extraData: ", extraData)
			log.Print("req.Referer(): ", req.Referer())
			log.Print("req.RemoteAddr: ", req.RemoteAddr)
		}
	}
	
	// Deal with the session stuff, etc.
	user, ok := common.PreRoute(w, req)
	if !ok {
		return
	}
	if common.Dev.SuperDebug {
		log.Print("after PreRoute")
		log.Print("routeMapEnum: ", routeMapEnum)
	}
	
	var err common.RouteError
	switch(prefix) {
		case "/api":
			common.RouteViewCounter.Bump(0)
			err = routeAPI(w,req,user)
			if err != nil {
				router.handleError(err,w,req,user)
			}
		case "/overview":
			common.RouteViewCounter.Bump(1)
			err = routeOverview(w,req,user)
			if err != nil {
				router.handleError(err,w,req,user)
			}
		case "/pages":
			common.RouteViewCounter.Bump(2)
			err = routeCustomPage(w,req,user,extraData)
			if err != nil {
				router.handleError(err,w,req,user)
			}
		case "/forums":
			common.RouteViewCounter.Bump(3)
			err = routeForums(w,req,user)
			if err != nil {
				router.handleError(err,w,req,user)
			}
		case "/forum":
			common.RouteViewCounter.Bump(4)
			err = routeForum(w,req,user,extraData)
			if err != nil {
				router.handleError(err,w,req,user)
			}
		case "/theme":
				err = common.ParseForm(w,req,user)
				if err != nil {
					router.handleError(err,w,req,user)
					return
				}
				
			common.RouteViewCounter.Bump(5)
			err = routeChangeTheme(w,req,user)
			if err != nil {
				router.handleError(err,w,req,user)
			}
		case "/attachs":
				err = common.ParseForm(w,req,user)
				if err != nil {
					router.handleError(err,w,req,user)
					return
				}
				
			common.RouteViewCounter.Bump(6)
			err = routeShowAttachment(w,req,user,extraData)
			if err != nil {
				router.handleError(err,w,req,user)
			}
		case "/ws":
					req.URL.Path += extraData
			common.RouteViewCounter.Bump(7)
			err = routeWebsockets(w,req,user)
			if err != nil {
				router.handleError(err,w,req,user)
			}
		case "/report":
			err = common.NoBanned(w,req,user)
			if err != nil {
				router.handleError(err,w,req,user)
				return
			}
			
			switch(req.URL.Path) {
				case "/report/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(8)
					err = routeReportSubmit(w,req,user,extraData)
			}
			if err != nil {
				router.handleError(err,w,req,user)
			}
		case "/topics":
			switch(req.URL.Path) {
				case "/topics/create/":
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(9)
					err = routes.CreateTopic(w,req,user,extraData)
				default:
					common.RouteViewCounter.Bump(10)
					err = routeTopics(w,req,user)
			}
			if err != nil {
				router.handleError(err,w,req,user)
			}
		case "/panel":
			err = common.SuperModOnly(w,req,user)
			if err != nil {
				router.handleError(err,w,req,user)
				return
			}
			
			switch(req.URL.Path) {
				case "/panel/forums/":
					common.RouteViewCounter.Bump(11)
					err = routePanelForums(w,req,user)
				case "/panel/forums/create/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(12)
					err = routePanelForumsCreateSubmit(w,req,user)
				case "/panel/forums/delete/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(13)
					err = routePanelForumsDelete(w,req,user,extraData)
				case "/panel/forums/delete/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(14)
					err = routePanelForumsDeleteSubmit(w,req,user,extraData)
				case "/panel/forums/edit/":
					common.RouteViewCounter.Bump(15)
					err = routePanelForumsEdit(w,req,user,extraData)
				case "/panel/forums/edit/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(16)
					err = routePanelForumsEditSubmit(w,req,user,extraData)
				case "/panel/forums/edit/perms/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(17)
					err = routePanelForumsEditPermsSubmit(w,req,user,extraData)
				case "/panel/forums/edit/perms/":
					common.RouteViewCounter.Bump(18)
					err = routePanelForumsEditPermsAdvance(w,req,user,extraData)
				case "/panel/forums/edit/perms/adv/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(19)
					err = routePanelForumsEditPermsAdvanceSubmit(w,req,user,extraData)
				case "/panel/settings/":
					common.RouteViewCounter.Bump(20)
					err = routePanelSettings(w,req,user)
				case "/panel/settings/edit/":
					common.RouteViewCounter.Bump(21)
					err = routePanelSettingEdit(w,req,user,extraData)
				case "/panel/settings/edit/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(22)
					err = routePanelSettingEditSubmit(w,req,user,extraData)
				case "/panel/settings/word-filters/":
					common.RouteViewCounter.Bump(23)
					err = routePanelWordFilters(w,req,user)
				case "/panel/settings/word-filters/create/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(24)
					err = routePanelWordFiltersCreateSubmit(w,req,user)
				case "/panel/settings/word-filters/edit/":
					common.RouteViewCounter.Bump(25)
					err = routePanelWordFiltersEdit(w,req,user,extraData)
				case "/panel/settings/word-filters/edit/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(26)
					err = routePanelWordFiltersEditSubmit(w,req,user,extraData)
				case "/panel/settings/word-filters/delete/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(27)
					err = routePanelWordFiltersDeleteSubmit(w,req,user,extraData)
				case "/panel/themes/":
					common.RouteViewCounter.Bump(28)
					err = routePanelThemes(w,req,user)
				case "/panel/themes/default/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(29)
					err = routePanelThemesSetDefault(w,req,user,extraData)
				case "/panel/plugins/":
					common.RouteViewCounter.Bump(30)
					err = routePanelPlugins(w,req,user)
				case "/panel/plugins/activate/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(31)
					err = routePanelPluginsActivate(w,req,user,extraData)
				case "/panel/plugins/deactivate/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(32)
					err = routePanelPluginsDeactivate(w,req,user,extraData)
				case "/panel/plugins/install/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(33)
					err = routePanelPluginsInstall(w,req,user,extraData)
				case "/panel/users/":
					common.RouteViewCounter.Bump(34)
					err = routePanelUsers(w,req,user)
				case "/panel/users/edit/":
					common.RouteViewCounter.Bump(35)
					err = routePanelUsersEdit(w,req,user,extraData)
				case "/panel/users/edit/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(36)
					err = routePanelUsersEditSubmit(w,req,user,extraData)
				case "/panel/analytics/views/":
					err = common.ParseForm(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(37)
					err = routePanelAnalyticsViews(w,req,user)
				case "/panel/analytics/routes/":
					err = common.ParseForm(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(38)
					err = routePanelAnalyticsRoutes(w,req,user)
				case "/panel/analytics/agents/":
					err = common.ParseForm(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(39)
					err = routePanelAnalyticsAgents(w,req,user)
				case "/panel/analytics/route/":
					common.RouteViewCounter.Bump(40)
					err = routePanelAnalyticsRouteViews(w,req,user,extraData)
				case "/panel/analytics/agent/":
					common.RouteViewCounter.Bump(41)
					err = routePanelAnalyticsAgentViews(w,req,user,extraData)
				case "/panel/analytics/posts/":
					err = common.ParseForm(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(42)
					err = routePanelAnalyticsPosts(w,req,user)
				case "/panel/analytics/topics/":
					err = common.ParseForm(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(43)
					err = routePanelAnalyticsTopics(w,req,user)
				case "/panel/groups/":
					common.RouteViewCounter.Bump(44)
					err = routePanelGroups(w,req,user)
				case "/panel/groups/edit/":
					common.RouteViewCounter.Bump(45)
					err = routePanelGroupsEdit(w,req,user,extraData)
				case "/panel/groups/edit/perms/":
					common.RouteViewCounter.Bump(46)
					err = routePanelGroupsEditPerms(w,req,user,extraData)
				case "/panel/groups/edit/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(47)
					err = routePanelGroupsEditSubmit(w,req,user,extraData)
				case "/panel/groups/edit/perms/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(48)
					err = routePanelGroupsEditPermsSubmit(w,req,user,extraData)
				case "/panel/groups/create/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(49)
					err = routePanelGroupsCreateSubmit(w,req,user)
				case "/panel/backups/":
					err = common.SuperAdminOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(50)
					err = routePanelBackups(w,req,user,extraData)
				case "/panel/logs/mod/":
					common.RouteViewCounter.Bump(51)
					err = routePanelLogsMod(w,req,user)
				case "/panel/debug/":
					err = common.AdminOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(52)
					err = routePanelDebug(w,req,user)
				default:
					common.RouteViewCounter.Bump(53)
					err = routePanelDashboard(w,req,user)
			}
			if err != nil {
				router.handleError(err,w,req,user)
			}
		case "/user":
			switch(req.URL.Path) {
				case "/user/edit/critical/":
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(54)
					err = routes.AccountEditCritical(w,req,user)
				case "/user/edit/critical/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(55)
					err = routeAccountEditCriticalSubmit(w,req,user)
				case "/user/edit/avatar/":
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(56)
					err = routeAccountEditAvatar(w,req,user)
				case "/user/edit/avatar/submit/":
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.HandleUploadRoute(w,req,user,common.Config.MaxRequestSize)
			if err != nil {
				router.handleError(err,w,req,user)
				return
			}
					err = common.NoUploadSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(57)
					err = routeAccountEditAvatarSubmit(w,req,user)
				case "/user/edit/username/":
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(58)
					err = routeAccountEditUsername(w,req,user)
				case "/user/edit/username/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(59)
					err = routeAccountEditUsernameSubmit(w,req,user)
				case "/user/edit/email/":
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(60)
					err = routeAccountEditEmail(w,req,user)
				case "/user/edit/token/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(61)
					err = routeAccountEditEmailTokenSubmit(w,req,user,extraData)
				default:
					req.URL.Path += extraData
					common.RouteViewCounter.Bump(62)
					err = routeProfile(w,req,user)
			}
			if err != nil {
				router.handleError(err,w,req,user)
			}
		case "/users":
			switch(req.URL.Path) {
				case "/users/ban/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(63)
					err = routes.BanUserSubmit(w,req,user,extraData)
				case "/users/unban/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(64)
					err = routes.UnbanUser(w,req,user,extraData)
				case "/users/activate/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(65)
					err = routes.ActivateUser(w,req,user,extraData)
				case "/users/ips/":
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(66)
					err = routes.IPSearch(w,req,user)
			}
			if err != nil {
				router.handleError(err,w,req,user)
			}
		case "/topic":
			switch(req.URL.Path) {
				case "/topic/create/submit/":
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.HandleUploadRoute(w,req,user,common.Config.MaxRequestSize)
			if err != nil {
				router.handleError(err,w,req,user)
				return
			}
					err = common.NoUploadSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(67)
					err = routes.CreateTopicSubmit(w,req,user)
				case "/topic/edit/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(68)
					err = routes.EditTopicSubmit(w,req,user,extraData)
				case "/topic/delete/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					req.URL.Path += extraData
					common.RouteViewCounter.Bump(69)
					err = routes.DeleteTopicSubmit(w,req,user)
				case "/topic/stick/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(70)
					err = routes.StickTopicSubmit(w,req,user,extraData)
				case "/topic/unstick/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(71)
					err = routes.UnstickTopicSubmit(w,req,user,extraData)
				case "/topic/lock/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					req.URL.Path += extraData
					common.RouteViewCounter.Bump(72)
					err = routes.LockTopicSubmit(w,req,user)
				case "/topic/unlock/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(73)
					err = routes.UnlockTopicSubmit(w,req,user,extraData)
				case "/topic/move/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(74)
					err = routes.MoveTopicSubmit(w,req,user,extraData)
				case "/topic/like/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(75)
					err = routeLikeTopicSubmit(w,req,user,extraData)
				default:
					common.RouteViewCounter.Bump(76)
					err = routeTopicID(w,req,user, extraData)
			}
			if err != nil {
				router.handleError(err,w,req,user)
			}
		case "/reply":
			switch(req.URL.Path) {
				case "/reply/create/":
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.HandleUploadRoute(w,req,user,common.Config.MaxRequestSize)
			if err != nil {
				router.handleError(err,w,req,user)
				return
			}
					err = common.NoUploadSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(77)
					err = routeCreateReplySubmit(w,req,user)
				case "/reply/edit/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(78)
					err = routes.ReplyEditSubmit(w,req,user,extraData)
				case "/reply/delete/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(79)
					err = routes.ReplyDeleteSubmit(w,req,user,extraData)
				case "/reply/like/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(80)
					err = routeReplyLikeSubmit(w,req,user,extraData)
			}
			if err != nil {
				router.handleError(err,w,req,user)
			}
		case "/profile":
			switch(req.URL.Path) {
				case "/profile/reply/create/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(81)
					err = routeProfileReplyCreateSubmit(w,req,user)
				case "/profile/reply/edit/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(82)
					err = routes.ProfileReplyEditSubmit(w,req,user,extraData)
				case "/profile/reply/delete/submit/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(83)
					err = routes.ProfileReplyDeleteSubmit(w,req,user,extraData)
			}
			if err != nil {
				router.handleError(err,w,req,user)
			}
		case "/accounts":
			switch(req.URL.Path) {
				case "/accounts/login/":
					common.RouteViewCounter.Bump(84)
					err = routeLogin(w,req,user)
				case "/accounts/create/":
					common.RouteViewCounter.Bump(85)
					err = routeRegister(w,req,user)
				case "/accounts/logout/":
					err = common.NoSessionMismatch(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					err = common.MemberOnly(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(86)
					err = routeLogout(w,req,user)
				case "/accounts/login/submit/":
					err = common.ParseForm(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(87)
					err = routeLoginSubmit(w,req,user)
				case "/accounts/create/submit/":
					err = common.ParseForm(w,req,user)
					if err != nil {
						router.handleError(err,w,req,user)
						return
					}
					
					common.RouteViewCounter.Bump(88)
					err = routeRegisterSubmit(w,req,user)
			}
			if err != nil {
				router.handleError(err,w,req,user)
			}
		/*case "/sitemaps": // TODO: Count these views
			req.URL.Path += extraData
			err = sitemapSwitch(w,req)
			if err != nil {
				router.handleError(err,w,req,user)
			}*/
		case "/uploads":
			if extraData == "" {
				common.NotFound(w,req)
				return
			}
			common.RouteViewCounter.Bump(90)
			req.URL.Path += extraData
			// TODO: Find a way to propagate errors up from this?
			router.UploadHandler(w,req) // TODO: Count these views
		case "":
			// Stop the favicons, robots.txt file, etc. resolving to the topics list
			// TODO: Add support for favicons and robots.txt files
			switch(extraData) {
				case "robots.txt":
					err = routeRobotsTxt(w,req) // TODO: Count these views
					if err != nil {
						router.handleError(err,w,req,user)
					}
					return
				/*case "sitemap.xml":
					err = routeSitemapXml(w,req) // TODO: Count these views
					if err != nil {
						router.handleError(err,w,req,user)
					}
					return*/
			}
			
			if extraData != "" {
				common.NotFound(w,req)
				return
			}

			handle, ok := RouteMap[common.Config.DefaultRoute]
			if !ok {
				// TODO: Make this a startup error not a runtime one
				log.Print("Unable to find the default route")
				common.NotFound(w,req)
				return
			}
			common.RouteViewCounter.Bump(routeMapEnum[common.Config.DefaultRoute])

			handle.(func(http.ResponseWriter, *http.Request, common.User) common.RouteError)(w,req,user)
		default:
			// A fallback for the routes which haven't been converted to the new router yet or plugins
			router.RLock()
			handle, ok := router.extraRoutes[req.URL.Path]
			router.RUnlock()
			
			if ok {
				common.RouteViewCounter.Bump(89) // TODO: Be more specific about *which* dynamic route it is
				req.URL.Path += extraData
				err = handle(w,req,user)
				if err != nil {
					router.handleError(err,w,req,user)
				}
				return
			}

			common.RouteViewCounter.Bump(91)
			common.NotFound(w,req)
	}
}
