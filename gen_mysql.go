// +build !pgsql, !sqlite, !mssql

/* This file was generated by Gosora's Query Generator. Please try to avoid modifying this file, as it might change at any time. */

package main

import "log"
import "database/sql"
import "./common"
//import "./query_gen/lib"

// nolint
type Stmts struct {
	getPassword *sql.Stmt
	getSettings *sql.Stmt
	isPluginActive *sql.Stmt
	getUsersOffset *sql.Stmt
	isThemeDefault *sql.Stmt
	getModlogs *sql.Stmt
	getModlogsOffset *sql.Stmt
	getReplyTID *sql.Stmt
	getTopicFID *sql.Stmt
	getUserReplyUID *sql.Stmt
	getUserName *sql.Stmt
	getEmailsByUser *sql.Stmt
	getTopicBasic *sql.Stmt
	getActivityEntry *sql.Stmt
	forumEntryExists *sql.Stmt
	groupEntryExists *sql.Stmt
	getForumTopicsOffset *sql.Stmt
	getAttachment *sql.Stmt
	getTopicRepliesOffset *sql.Stmt
	getTopicList *sql.Stmt
	getTopicReplies *sql.Stmt
	getForumTopics *sql.Stmt
	getProfileReplies *sql.Stmt
	getWatchers *sql.Stmt
	createReport *sql.Stmt
	addActivity *sql.Stmt
	notifyOne *sql.Stmt
	addEmail *sql.Stmt
	addSubscription *sql.Stmt
	addForumPermsToForum *sql.Stmt
	addPlugin *sql.Stmt
	addTheme *sql.Stmt
	addAttachment *sql.Stmt
	createWordFilter *sql.Stmt
	editReply *sql.Stmt
	editProfileReply *sql.Stmt
	updateSetting *sql.Stmt
	updatePlugin *sql.Stmt
	updatePluginInstall *sql.Stmt
	updateTheme *sql.Stmt
	updateUser *sql.Stmt
	updateGroupPerms *sql.Stmt
	updateGroup *sql.Stmt
	updateEmail *sql.Stmt
	verifyEmail *sql.Stmt
	setTempGroup *sql.Stmt
	updateWordFilter *sql.Stmt
	bumpSync *sql.Stmt
	deleteProfileReply *sql.Stmt
	deleteActivityStreamMatch *sql.Stmt
	deleteWordFilter *sql.Stmt
	reportExists *sql.Stmt
	modlogCount *sql.Stmt
	notifyWatchers *sql.Stmt

	getActivityFeedByWatcher *sql.Stmt
	getActivityCountByWatcher *sql.Stmt
	todaysPostCount *sql.Stmt
	todaysTopicCount *sql.Stmt
	todaysReportCount *sql.Stmt
	todaysNewUserCount *sql.Stmt
	findUsersByIPUsers *sql.Stmt
	findUsersByIPTopics *sql.Stmt
	findUsersByIPReplies *sql.Stmt

	Mocks bool
}

// nolint
func _gen_mysql() (err error) {
	if common.Dev.DebugMode {
		log.Print("Building the generated statements")
	}
	
	log.Print("Preparing getPassword statement.")
	stmts.getPassword, err = db.Prepare("SELECT `password`,`salt` FROM `users` WHERE `uid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing getSettings statement.")
	stmts.getSettings, err = db.Prepare("SELECT `name`,`content`,`type` FROM `settings`")
	if err != nil {
		return err
	}
		
	log.Print("Preparing isPluginActive statement.")
	stmts.isPluginActive, err = db.Prepare("SELECT `active` FROM `plugins` WHERE `uname` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing getUsersOffset statement.")
	stmts.getUsersOffset, err = db.Prepare("SELECT `uid`,`name`,`group`,`active`,`is_super_admin`,`avatar` FROM `users` ORDER BY uid ASC LIMIT ?,?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing isThemeDefault statement.")
	stmts.isThemeDefault, err = db.Prepare("SELECT `default` FROM `themes` WHERE `uname` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing getModlogs statement.")
	stmts.getModlogs, err = db.Prepare("SELECT `action`,`elementID`,`elementType`,`ipaddress`,`actorID`,`doneAt` FROM `moderation_logs`")
	if err != nil {
		return err
	}
		
	log.Print("Preparing getModlogsOffset statement.")
	stmts.getModlogsOffset, err = db.Prepare("SELECT `action`,`elementID`,`elementType`,`ipaddress`,`actorID`,`doneAt` FROM `moderation_logs` ORDER BY doneAt DESC LIMIT ?,?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing getReplyTID statement.")
	stmts.getReplyTID, err = db.Prepare("SELECT `tid` FROM `replies` WHERE `rid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing getTopicFID statement.")
	stmts.getTopicFID, err = db.Prepare("SELECT `parentID` FROM `topics` WHERE `tid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing getUserReplyUID statement.")
	stmts.getUserReplyUID, err = db.Prepare("SELECT `uid` FROM `users_replies` WHERE `rid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing getUserName statement.")
	stmts.getUserName, err = db.Prepare("SELECT `name` FROM `users` WHERE `uid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing getEmailsByUser statement.")
	stmts.getEmailsByUser, err = db.Prepare("SELECT `email`,`validated`,`token` FROM `emails` WHERE `uid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing getTopicBasic statement.")
	stmts.getTopicBasic, err = db.Prepare("SELECT `title`,`content` FROM `topics` WHERE `tid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing getActivityEntry statement.")
	stmts.getActivityEntry, err = db.Prepare("SELECT `actor`,`targetUser`,`event`,`elementType`,`elementID` FROM `activity_stream` WHERE `asid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing forumEntryExists statement.")
	stmts.forumEntryExists, err = db.Prepare("SELECT `fid` FROM `forums` WHERE `name` = '' ORDER BY fid ASC LIMIT 0,1")
	if err != nil {
		return err
	}
		
	log.Print("Preparing groupEntryExists statement.")
	stmts.groupEntryExists, err = db.Prepare("SELECT `gid` FROM `users_groups` WHERE `name` = '' ORDER BY gid ASC LIMIT 0,1")
	if err != nil {
		return err
	}
		
	log.Print("Preparing getForumTopicsOffset statement.")
	stmts.getForumTopicsOffset, err = db.Prepare("SELECT `tid`,`title`,`content`,`createdBy`,`is_closed`,`sticky`,`createdAt`,`lastReplyAt`,`lastReplyBy`,`parentID`,`postCount`,`likeCount` FROM `topics` WHERE `parentID` = ? ORDER BY sticky DESC,lastReplyAt DESC,createdBy DESC LIMIT ?,?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing getAttachment statement.")
	stmts.getAttachment, err = db.Prepare("SELECT `sectionID`,`sectionTable`,`originID`,`originTable`,`uploadedBy`,`path` FROM `attachments` WHERE `path` = ? AND `sectionID` = ? AND `sectionTable` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing getTopicRepliesOffset statement.")
	stmts.getTopicRepliesOffset, err = db.Prepare("SELECT `replies`.`rid`, `replies`.`content`, `replies`.`createdBy`, `replies`.`createdAt`, `replies`.`lastEdit`, `replies`.`lastEditBy`, `users`.`avatar`, `users`.`name`, `users`.`group`, `users`.`url_prefix`, `users`.`url_name`, `users`.`level`, `replies`.`ipaddress`, `replies`.`likeCount`, `replies`.`actionType` FROM `replies` LEFT JOIN `users` ON `replies`.`createdBy` = `users`.`uid`  WHERE `replies`.`tid` = ? ORDER BY replies.rid ASC LIMIT ?,?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing getTopicList statement.")
	stmts.getTopicList, err = db.Prepare("SELECT `topics`.`tid`, `topics`.`title`, `topics`.`content`, `topics`.`createdBy`, `topics`.`is_closed`, `topics`.`sticky`, `topics`.`createdAt`, `topics`.`parentID`, `users`.`name`, `users`.`avatar` FROM `topics` LEFT JOIN `users` ON `topics`.`createdBy` = `users`.`uid`  ORDER BY topics.sticky DESC,topics.lastReplyAt DESC,topics.createdBy DESC")
	if err != nil {
		return err
	}
		
	log.Print("Preparing getTopicReplies statement.")
	stmts.getTopicReplies, err = db.Prepare("SELECT `replies`.`rid`, `replies`.`content`, `replies`.`createdBy`, `replies`.`createdAt`, `replies`.`lastEdit`, `replies`.`lastEditBy`, `users`.`avatar`, `users`.`name`, `users`.`group`, `users`.`url_prefix`, `users`.`url_name`, `users`.`level`, `replies`.`ipaddress` FROM `replies` LEFT JOIN `users` ON `replies`.`createdBy` = `users`.`uid`  WHERE `tid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing getForumTopics statement.")
	stmts.getForumTopics, err = db.Prepare("SELECT `topics`.`tid`, `topics`.`title`, `topics`.`content`, `topics`.`createdBy`, `topics`.`is_closed`, `topics`.`sticky`, `topics`.`createdAt`, `topics`.`lastReplyAt`, `topics`.`parentID`, `users`.`name`, `users`.`avatar` FROM `topics` LEFT JOIN `users` ON `topics`.`createdBy` = `users`.`uid`  WHERE `topics`.`parentID` = ? ORDER BY topics.sticky DESC,topics.lastReplyAt DESC,topics.createdBy DESC")
	if err != nil {
		return err
	}
		
	log.Print("Preparing getProfileReplies statement.")
	stmts.getProfileReplies, err = db.Prepare("SELECT `users_replies`.`rid`, `users_replies`.`content`, `users_replies`.`createdBy`, `users_replies`.`createdAt`, `users_replies`.`lastEdit`, `users_replies`.`lastEditBy`, `users`.`avatar`, `users`.`name`, `users`.`group` FROM `users_replies` LEFT JOIN `users` ON `users_replies`.`createdBy` = `users`.`uid`  WHERE `users_replies`.`uid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing getWatchers statement.")
	stmts.getWatchers, err = db.Prepare("SELECT  `activity_subscriptions`.`user` FROM `activity_stream` INNER JOIN `activity_subscriptions` ON `activity_subscriptions`.`targetType` = `activity_stream`.`elementType` AND `activity_subscriptions`.`targetID` = `activity_stream`.`elementID` AND `activity_subscriptions`.`user` != `activity_stream`.`actor`  WHERE `asid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing createReport statement.")
	stmts.createReport, err = db.Prepare("INSERT INTO `topics`(`title`,`content`,`parsed_content`,`createdAt`,`lastReplyAt`,`createdBy`,`lastReplyBy`,`data`,`parentID`,`css_class`) VALUES (?,?,?,UTC_TIMESTAMP(),UTC_TIMESTAMP(),?,?,?,1,'report')")
	if err != nil {
		return err
	}
		
	log.Print("Preparing addActivity statement.")
	stmts.addActivity, err = db.Prepare("INSERT INTO `activity_stream`(`actor`,`targetUser`,`event`,`elementType`,`elementID`) VALUES (?,?,?,?,?)")
	if err != nil {
		return err
	}
		
	log.Print("Preparing notifyOne statement.")
	stmts.notifyOne, err = db.Prepare("INSERT INTO `activity_stream_matches`(`watcher`,`asid`) VALUES (?,?)")
	if err != nil {
		return err
	}
		
	log.Print("Preparing addEmail statement.")
	stmts.addEmail, err = db.Prepare("INSERT INTO `emails`(`email`,`uid`,`validated`,`token`) VALUES (?,?,?,?)")
	if err != nil {
		return err
	}
		
	log.Print("Preparing addSubscription statement.")
	stmts.addSubscription, err = db.Prepare("INSERT INTO `activity_subscriptions`(`user`,`targetID`,`targetType`,`level`) VALUES (?,?,?,2)")
	if err != nil {
		return err
	}
		
	log.Print("Preparing addForumPermsToForum statement.")
	stmts.addForumPermsToForum, err = db.Prepare("INSERT INTO `forums_permissions`(`gid`,`fid`,`preset`,`permissions`) VALUES (?,?,?,?)")
	if err != nil {
		return err
	}
		
	log.Print("Preparing addPlugin statement.")
	stmts.addPlugin, err = db.Prepare("INSERT INTO `plugins`(`uname`,`active`,`installed`) VALUES (?,?,?)")
	if err != nil {
		return err
	}
		
	log.Print("Preparing addTheme statement.")
	stmts.addTheme, err = db.Prepare("INSERT INTO `themes`(`uname`,`default`) VALUES (?,?)")
	if err != nil {
		return err
	}
		
	log.Print("Preparing addAttachment statement.")
	stmts.addAttachment, err = db.Prepare("INSERT INTO `attachments`(`sectionID`,`sectionTable`,`originID`,`originTable`,`uploadedBy`,`path`) VALUES (?,?,?,?,?,?)")
	if err != nil {
		return err
	}
		
	log.Print("Preparing createWordFilter statement.")
	stmts.createWordFilter, err = db.Prepare("INSERT INTO `word_filters`(`find`,`replacement`) VALUES (?,?)")
	if err != nil {
		return err
	}
		
	log.Print("Preparing editReply statement.")
	stmts.editReply, err = db.Prepare("UPDATE `replies` SET `content` = ?,`parsed_content` = ? WHERE `rid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing editProfileReply statement.")
	stmts.editProfileReply, err = db.Prepare("UPDATE `users_replies` SET `content` = ?,`parsed_content` = ? WHERE `rid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing updateSetting statement.")
	stmts.updateSetting, err = db.Prepare("UPDATE `settings` SET `content` = ? WHERE `name` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing updatePlugin statement.")
	stmts.updatePlugin, err = db.Prepare("UPDATE `plugins` SET `active` = ? WHERE `uname` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing updatePluginInstall statement.")
	stmts.updatePluginInstall, err = db.Prepare("UPDATE `plugins` SET `installed` = ? WHERE `uname` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing updateTheme statement.")
	stmts.updateTheme, err = db.Prepare("UPDATE `themes` SET `default` = ? WHERE `uname` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing updateUser statement.")
	stmts.updateUser, err = db.Prepare("UPDATE `users` SET `name` = ?,`email` = ?,`group` = ? WHERE `uid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing updateGroupPerms statement.")
	stmts.updateGroupPerms, err = db.Prepare("UPDATE `users_groups` SET `permissions` = ? WHERE `gid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing updateGroup statement.")
	stmts.updateGroup, err = db.Prepare("UPDATE `users_groups` SET `name` = ?,`tag` = ? WHERE `gid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing updateEmail statement.")
	stmts.updateEmail, err = db.Prepare("UPDATE `emails` SET `email` = ?,`uid` = ?,`validated` = ?,`token` = ? WHERE `email` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing verifyEmail statement.")
	stmts.verifyEmail, err = db.Prepare("UPDATE `emails` SET `validated` = 1,`token` = '' WHERE `email` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing setTempGroup statement.")
	stmts.setTempGroup, err = db.Prepare("UPDATE `users` SET `temp_group` = ? WHERE `uid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing updateWordFilter statement.")
	stmts.updateWordFilter, err = db.Prepare("UPDATE `word_filters` SET `find` = ?,`replacement` = ? WHERE `wfid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing bumpSync statement.")
	stmts.bumpSync, err = db.Prepare("UPDATE `sync` SET `last_update` = UTC_TIMESTAMP()")
	if err != nil {
		return err
	}
		
	log.Print("Preparing deleteProfileReply statement.")
	stmts.deleteProfileReply, err = db.Prepare("DELETE FROM `users_replies` WHERE `rid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing deleteActivityStreamMatch statement.")
	stmts.deleteActivityStreamMatch, err = db.Prepare("DELETE FROM `activity_stream_matches` WHERE `watcher` = ? AND `asid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing deleteWordFilter statement.")
	stmts.deleteWordFilter, err = db.Prepare("DELETE FROM `word_filters` WHERE `wfid` = ?")
	if err != nil {
		return err
	}
		
	log.Print("Preparing reportExists statement.")
	stmts.reportExists, err = db.Prepare("SELECT COUNT(*) AS `count` FROM `topics` WHERE `data` = ? AND `data` != '' AND `parentID` = 1")
	if err != nil {
		return err
	}
		
	log.Print("Preparing modlogCount statement.")
	stmts.modlogCount, err = db.Prepare("SELECT COUNT(*) AS `count` FROM `moderation_logs`")
	if err != nil {
		return err
	}
		
	log.Print("Preparing notifyWatchers statement.")
	stmts.notifyWatchers, err = db.Prepare("INSERT INTO `activity_stream_matches`(`watcher`,`asid`) SELECT `activity_subscriptions`.`user`, `activity_stream`.`asid` FROM `activity_stream` INNER JOIN `activity_subscriptions` ON `activity_subscriptions`.`targetType` = `activity_stream`.`elementType` AND `activity_subscriptions`.`targetID` = `activity_stream`.`elementID` AND `activity_subscriptions`.`user` != `activity_stream`.`actor`  WHERE `asid` = ?")
	if err != nil {
		return err
	}
	
	return nil
}
